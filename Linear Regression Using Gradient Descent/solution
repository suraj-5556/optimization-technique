import numpy as np
def linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:
    # Your code here, make sure to round
    list1 = X
    w = np.zeros(len(list1[0]))
    
    def feed_forward(array, weight):
        return np.dot(array, weight)
    
    def loss(array, y):
        count = 0
        for i, j in zip(array, y):
            count = count + (feed_forward(i, w) - j) ** 2
        return count / (2 * len(y))
    
    def update(weight, array, y):
        for i in range(len(weight)):
            count = 0
            for j in range(len(y)):
                count = count + (feed_forward(array[j], w) - y[j]) * array[j][i]
            weight[i] = weight[i] - alpha * (count / len(y))
    
    for i in range(iterations):
        update(w, list1, y)
    
    return w
